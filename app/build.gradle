plugins {
    id("io.gitlab.arturbosch.detekt") version "$detekt_version"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.protobuf'
apply plugin: 'io.sweers.redacted.redacted-plugin'

if (file('fabric.properties').exists()) {
    apply plugin: 'io.fabric'
}

redactedPlugin {
    replacementString = '***'
}

detekt {
    toolVersion = "1.0.1"
    input = files("src/main/java", "src/test/java")
    baseline = file("detekt-baseline.xml")
}

android {
    compileSdkVersion = 29
    buildToolsVersion = '29.0.3'
    ext {
        brdMarketingVersion = 4   // Major version. Usually affected by marketing. Maximum value: 99
        brdProductVersion = 1    // Minor version. Usually affected by product. Maximum value: 99
        brdEngineeringVersion = 1 // Hot fix version. Usually affected by engineering. Maximum value: 9
        brdBuildVersion = 3       // Build version. Increase for each new build. Maximum value: 999

        // The version code must be monotonically increasing. It is used by Android to maintain upgrade/downgrade
        // relationship between builds with a max value of 2 100 000 000.
        generateVersionCode = { marketing, product, engineering, build ->
            (marketing * 1000000) + (product * 10000) + (engineering * 1000) + build;
        }

        brdVersionCode = generateVersionCode(brdMarketingVersion, brdProductVersion, brdEngineeringVersion, brdBuildVersion)
        brdInternalVersionName = "$brdMarketingVersion.$brdProductVersion.$ext.brdEngineeringVersion.$ext.brdBuildVersion"
        fabricEnable = file('fabric.properties').exists()
    }
    defaultConfig {
        testInstrumentationRunner = 'androidx.test.runner.AndroidJUnitRunner'
        applicationId = 'com.breadwallet'
        minSdkVersion 23
        targetSdkVersion 28

        versionCode brdVersionCode
        versionName "$brdMarketingVersion.$brdProductVersion.$brdEngineeringVersion"
        buildConfigField "int", "BUILD_VERSION", "$brdBuildVersion"
        buildConfigField "boolean", "FABRIC_ENABLE", "$fabricEnable"

        multiDexEnabled true

        // Core Library
        missingDimensionStrategy 'network', 'onMainnet'

        buildConfigField "String", "BDB_CLIENT_TOKEN", BDB_CLIENT_TOKEN
    }
    signingConfigs {
        FakeSigningConfig {
            keyAlias 'key0'
            keyPassword 'qwerty'
            storeFile file('../FakeSigningKey')
            storePassword 'qwerty'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    packagingOptions {
        pickFirst 'protobuf.meta'
    }
    // Specifies two flavor dimensions.
    flavorDimensions "mode"
    productFlavors {
        brd {
            applicationId = "cash.just"
            dimension "mode"
            resValue "string", "app_name", "BRD"
            buildConfigField "boolean", "BITCOIN_TESTNET", "false"
            signingConfig signingConfigs.FakeSigningConfig // Uncomment to fake sign a mainnet release build for testing.
            missingDimensionStrategy 'network', 'onMainnet'
        }
        brdTestnet {
            applicationId = "cash.just.testnet"
            dimension "mode"
            resValue "string", "app_name", "BRD Testnet"
            buildConfigField "boolean", "BITCOIN_TESTNET", "true"
            signingConfig signingConfigs.FakeSigningConfig
            missingDimensionStrategy 'network', 'onTestnet'
        }
    }
    lintOptions {
        lintConfig file("lint.xml")
        // set to true to turn off analysis progress reporting by lint
        quiet false

        explainIssues true
        // if true, stop the gradle build if errors are found
        abortOnError true
        // if true, only report errors
        ignoreWarnings false

        checkReleaseBuilds false

        disable 'MissingTranslation'
    }
    buildTypes {
        release {
            manifestPlaceholders = [applicationIcon: "@mipmap/ic_launcher"]
            debuggable = false
            minifyEnabled = false
            buildConfigField "boolean", "IS_INTERNAL_BUILD", "false"
        }
        debug {
            applicationIdSuffix '.debug'
            manifestPlaceholders = [applicationIcon: "@mipmap/ic_launcher_grayscale"]
            debuggable = true
            jniDebuggable = true
            minifyEnabled = false
            buildConfigField "boolean", "IS_INTERNAL_BUILD", "true"

        }

    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/java',
                            '${protobuf.generatedFilesBaseDir}/main/javalite']
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "${output.baseName}-${brdInternalVersionName}.apk"
        }

        // Add kapt generated sources, required only for IntelliJ IDEA compatibility
        variant.sourceSets
                .find { it.name == variant.name }
                .java
                .srcDirs += "$buildDir/generated/source/kaptKotlin/${variant.name}/"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    androidExtensions {
        experimental = true
    }
}

task downloadBundles {
    doLast {
        def bundles = ["brd-web-3", "brd-tokens-prod", "brd-web-3-staging", "brd-tokens-staging"]
        def stagingHost = "api.breadwallet.com"
        def releaseHost = "stage2.breadwallet.com"
        for (String bundleName : bundles) {
            def fileUrl
            def resFolder
            if (bundleName.contains("staging")) {
                fileUrl = "https://${stagingHost}/assets/bundles/${bundleName}/download"
                resFolder = "${projectDir}/src/debug/res/raw/"
            } else {
                fileUrl = "https://${releaseHost}/assets/bundles/${bundleName}/download"
                resFolder = "${projectDir}/src/main/res/raw/"
            }

            def folder = file(resFolder)
            if (!folder.exists()) {
                folder.mkdirs()
            }
            println("Downloading: ${fileUrl} into ${resFolder}")
            new File("${resFolder}${bundleName.replace("-", "_")}.tar").withOutputStream { out ->
                new URL(fileUrl).withInputStream { from -> out << from }
            }
        }
    }
}

tasks.whenTaskAdded {
    if (it.name.startsWith('assemble') && it.name.endsWith('Release')) {
        it.doFirst {
            if (!project.file('fabric.properties').exists() && !project.hasProperty("IGNORE_FABRIC_KEYS_MISSING")) {
                throw new RuntimeException("Please create ${projectDir}/fabric.properties or use -PIGNORE_FABRIC_KEYS_MISSING.")
            }
        }
    }
}

protobuf {
    protoc {
        // You still need protoc like in the non-Android case
        artifact = 'com.google.protobuf:protoc:3.0.0'

    }
    plugins {
        javalite {
            // The codegen for lite comes as a separate artifact
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'

        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                // In most cases you don't need the full Java output
                // if you use the lite output.
                remove java
            }
            task.plugins {
                javalite {}
            }
        }
    }
}

clean {
    delete protobuf.generatedFilesBaseDir
}

dependencies {
    implementation "com.breadwallet.core:corecrypto-android:$core_version"

    // AndroidX
    implementation "androidx.lifecycle:lifecycle-extensions:$ax_lifecycle_ext"
    implementation "androidx.work:work-runtime-ktx:$ax_workmanager"
    implementation "androidx.core:core-ktx:$ax_core"
    implementation "androidx.appcompat:appcompat:$ax_appcompat"
    implementation "androidx.cardview:cardview:$ax_cardview"
    implementation "androidx.constraintlayout:constraintlayout:$ax_constraintlayout"
    implementation "androidx.gridlayout:gridlayout:$ax_gridlayout"
    implementation "androidx.recyclerview:recyclerview:$ax_recyclerview"
    implementation "androidx.legacy:legacy-support-v13:$ax_legacyV13"
    testImplementation "androidx.test.espresso:espresso-core:$ax_espresso"
    testImplementation "androidx.test:runner:$ax_test_runner"
    testImplementation "androidx.test:rules:$ax_test_rules"
    androidTestImplementation "androidx.work:work-testing:$ax_workmanager"

    // Test infrastructure
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "org.mockito:mockito-android:$mockito_version"

    // Google/Firebase
    implementation "com.google.android.material:material:$material_components_version"
    implementation "com.google.firebase:firebase-core:$firebase_core"
    implementation "com.google.firebase:firebase-messaging:$firebase_messaging"
    implementation "com.google.guava:guava:$guava_version"
    implementation "com.google.protobuf:protobuf-lite:$protobuf_version"
    implementation "com.google.zxing:core:$zxing_version"

    // Square
    implementation "com.squareup.picasso:picasso:$picasso_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"
    implementation "com.squareup.moshi:moshi:$moshi_version"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"

    // Webserver/Platform
    implementation "commons-io:commons-io:$commons_io_version"
    implementation "io.sigpipe:jbsdiff:$jbsdiff_version"
    implementation "org.eclipse.jetty:jetty-continuation:$jetty_version"
    implementation "org.eclipse.jetty:jetty-webapp:$jetty_version"
    implementation "org.eclipse.jetty.websocket:websocket-server:$jetty_version"
    implementation "org.slf4j:slf4j-api:$slf4j_version"

    // Kotlin libraries
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    // Mobius
    implementation "com.spotify.mobius:mobius-core:$mobius_version"
    implementation "com.spotify.mobius:mobius-android:$mobius_version"
    testImplementation "com.spotify.mobius:mobius-test:$mobius_version"

    implementation "drewcarlson.mobius:mobius-coroutines:$mobius_coroutines_version"

    compileOnly "drewcarlson.switchboard:api-mobius:$switchboard_version"
    kapt "drewcarlson.switchboard:generator-mobius:$switchboard_version"

    // Fastadapter
    implementation "com.mikepenz:fastadapter:$fastadapter_version"
    implementation "com.mikepenz:fastadapter-extensions-diff:$fastadapter_version"
    implementation "com.mikepenz:fastadapter-extensions-drag:$fastadapter_version"
    implementation "com.mikepenz:fastadapter-extensions-utils:$fastadapter_version"

    // Conductor
    implementation "com.bluelinelabs:conductor:$conductor_version"
    implementation "com.bluelinelabs:conductor-support:$conductor_version"

    // Kodein DI
    implementation "org.kodein.di:kodein-di-erased-jvm:$kodein_version"
    implementation "org.kodein.di:kodein-di-framework-android-x:$kodein_version"

    // Debugging/Monitoring
    debugImplementation "com.github.anrwatchdog:anrwatchdog:$anr_watchdog_version"
    implementation("com.crashlytics.sdk.android:crashlytics:$crashlytics_version@aar") {
        transitive = true
    }

    compileOnly "io.sweers.redacted:redacted-compiler-plugin-annotation:$redacted_version"

    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detekt_version"
}

apply plugin: 'com.google.gms.google-services'
